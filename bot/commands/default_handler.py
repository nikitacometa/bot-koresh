import logging
from datetime import datetime, timedelta
from time import sleep
from typing import List

from telegram import Update, Message, User
from telegram.ext import CallbackContext

from bot.commands.admin_mode import try_process_admin_command
from bot.commands.joke import get_anek
from bot.commands.create_challenge import create_challenge
from bot.commands.show_map import extract_coordinates
from bot.commands.track_address import track_address
from bot.commands.troll_mode import is_troll
from bot.commands.delete_after import get_delete_after
from bot.commands.save_photo import save_photo
from bot.commands.split_teams import split_into_teams, is_splitting
from bot.commands.vanish_mode import is_vanishing
from bot.context import app_context, settings
from bot.validator import is_valid_bitcoin_address
from managers.phrase_manager import PhraseManager
from utils.classes.moshnar_command import moshnar_command
from utils.message_utils import send_sladko, delete_msg_after, send_message, vanish

# TODO: make parse_utils or Parser
from utils.parse_utils import get_alpha_part
from utils.str_utils import parse_time_to_seconds


def have_start_in_list(tokens: List[str], starts: List[str]) -> bool:
    return any(filter(lambda token: any(filter(lambda s: token.startswith(s), starts)), tokens))


def have_inside_in_list(tokens: List[str], starts: List[str]) -> bool:
    return any(filter(lambda token: any(filter(lambda s: s in token, starts)), tokens))


def have_starts(tokens: List[str], *args):
    return have_start_in_list(tokens, [arg for arg in args])


def have_inside(tokens: List[str], *args):
    return have_inside_in_list(tokens, [arg for arg in args])


def has_mention_of_me(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–∫–æ—Ä–µ—à', '–∫–æ—Ä–µ—Ñ–∞–Ω']) and not have_start_in_list(tokens, ['–∫–æ—Ä–µ—à–∞–º–∏'])


def is_reply_to_me(message: Message):
    try:
        return message.reply_to_message.from_user.id == app_context.bot.id
    except Exception:
        return False


def is_thanks(tokens: List[str]) -> bool:
    return are_in_a_row(tokens, ['–æ—Ç', '–¥—É—à–∏']) or have_start_in_list(tokens, ['—Å–ø—Å', '—Å—è–ø', '—Å–ø–∞—Å–∏–±', '—Å–µ–Ω–∫—Å'])


def are_in_a_row(tokens: List[str], words: List[str]) -> bool:
    if len(words) > len(tokens):
        return False

    # TODO: optimize
    for i in range(len(tokens) - len(words) + 1):
        ok = True
        for j in range(len(words)):
            if not tokens[j + i].startswith(words[j]):
                ok = False
                break
        if ok:
            return True
    return False


def is_my_chat(update: Update) -> bool:
    return update.message.chat.id == settings.bot_chat_id


def is_split_request(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–ø–æ–¥–µ–ª–∏', '–Ω–∞–º–æ—à–Ω–∏', '—Ä–∞–∑–¥–µ–ª–∏', '–ø–æ—Å–ø–ª–∏—Ç—å']) and \
           have_start_in_list(tokens, ['–ø–ª–∏–∑', '–ø–ª–∑', '–ø–ª–µ–∑', '–ø–æ–∂', '–ø–æ-–±—Ä–∞—Ç—Å–∫–∏'])


def is_question(tokens: List[str]) -> bool:
    return '?' in tokens[-1]


def is_sladko(msg: Message) -> bool:
    if msg.sticker is None:
        return False

    return msg.sticker.file_unique_id == 'AgADBgADhlyiAw'


def handle_sladko(msg: Message, context: CallbackContext) -> bool:
    context.chat_data['sladko_prev'] = context.chat_data.get('sladko_cur')
    context.chat_data['sladko_cur'] = is_sladko(msg)

    if context.chat_data.get('sladko_cur') and context.chat_data.get('sladko_prev'):
        context.chat_data['sladko_cur'] = False
        send_sladko(context.bot, msg.chat.id)

    return is_sladko(msg)


@moshnar_command
def default_message_handler(update: Update, context: CallbackContext):
    logging.debug('default handler')

    if try_process_admin_command(update, context):
        return

    message: Message = update.message
    sender: User = message.from_user
    text: str = message.text
    tokens = text.split() if text is not None else []
    low_tokens = text.lower().split() if text is not None else []

    if handle_sladko(message, context):
        return

    if is_splitting(text):
        context.chat_data['not_a_command'] = True
        split_into_teams(update, context)
        return

    if sender.username == 'Luckmannn':
        # TODO: store this info in DB
        # TODO: set this feature via command
        now = datetime.now()
        if now - app_context.last_hi_mark_at > settings.hi_mark_delay_h * 24:
            send_message(context, update, 'ooh hi Mark)')
            app_context.last_hi_mark_at = now

    try:
        coords = extract_coordinates(tokens)
        if coords:
            img_link = app_context.map_client.get_img_link_by_coordinates(coords)
            reply = update.message.reply_photo(photo=img_link)
            vanish(reply, context)
    except Exception as e:
        logging.exception(e)

    # TODO: reformat for easy creating of new situations/cases
    for s in tokens:
        try:
            alpha_part = get_alpha_part(s)
            if is_valid_bitcoin_address(alpha_part):
                try:
                    track_address(alpha_part, message, context.bot)
                except Exception as e:
                    logging.exception(e)
            return
        except Exception:
            pass

    delete_after_time = get_delete_after(low_tokens)
    if delete_after_time is not None:
        logging.debug(f'default_handler = {delete_after_time}')

        timer = parse_time_to_seconds(delete_after_time)
        if timer is None:
            send_message(context, update, '–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ(')
            return

        delete_msg_after(update.message.chat.id, message.message_id, timedelta(seconds=timer))
        reply_msg = send_message(context, update, '–û—Ä–≥–∞–Ω–∏–∑—É–µ–º-–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º)')

        bot_delay = min(7, timer)
        # delete my msg as well
        delete_msg_after(reply_msg.chat.id, reply_msg.message_id, timedelta(seconds=bot_delay))
        return

    if is_vanishing(context):
        return

    # TODO: make an option
    saving_photos = False
    if saving_photos and message.photo:
        biggest = None
        for photo in message.photo:
            if biggest is None or photo.file_size > biggest.file_size:
                biggest = photo

        if save_photo(context, biggest.file_id, sender.id, sender.name, message.caption, message.chat.id):
            context.bot.delete_message(message.chat.id, message.message_id)
            logging.info(f"Message for photo '{biggest.file_id}' was deleted")
            return
        else:
            send_message(context, update, f"–•–∑ —á–µ –ø–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–∫—É '{biggest.file_id}'")

    if message.location is not None:
        location_str = f'{message.location.latitude}, {message.location.longitude}'
        logging.debug(f'{sender.name} —Å–µ–π—á–∞—Å —á–∏–ª–ª–∏—Ç –Ω–∞ ({location_str})')
        send_message(context, update, location_str)
        return

    if text is None:
        return
    # after that just text handlers

    if is_troll(context):
        # checking only the last token for a rhyme
        if have_starts(low_tokens[-1:], '–∫–∞—Ä–¥–∏–≥–∞–Ω', '–∫–∞—Ä–¥–∏-–≥–∞–Ω', '–º–∞—Å—Ç–µ—Ä-–∫–∞—Ä–¥–∏–≥–∞–Ω'):
            message.reply_text(PhraseManager.kardigun_rhyme())
            return

        if are_in_a_row(low_tokens, ['–∫–∞—Ä–¥—ã—á', '–ø–µ—Ä–¥–∏']) or are_in_a_row(low_tokens, ['–∫–∞—Ä–¥–∏—á', '–ø–µ—Ä–¥–∏']):
            message.reply_text('–°–Ω–æ–≤–∞ –≤ —Å–ø–µ—Ä–º–µüòå')
            return

        if are_in_a_row(low_tokens, ['–∫–æ—Ä–µ—à', '–≤—ã–≤–æ–∑']):
            message.reply_text('–ë–ª—è –Ω—É —Ç—ã –ø–æ–±–∞–∑–∞—Ä—å –º–Ω–µ —Ç—É—Ç –µ—â—ë –ø—Ä–æ –≤—ã–≤–æ–∑ –ª–∞–ª—ã—á))')
            return

        if str(low_tokens[-1]).endswith('–¥–∞'):
            message.reply_text('–ü–∏–∑–¥–∞))')
            return

        if have_starts(low_tokens, '–ø—Ä–∏–Ω—è–ª'):
            message.reply_text('–ù–∞ —Ä–æ—Ç–æ–∫ —Ç—ã –ø—Ä–∏–Ω—è–ª))')
            return

        if have_starts(low_tokens, '–∞–ª–∏—Å–∞'):
            message.reply_text('–•—É–∏—Å–∞ —ë–ø—Ç. –¢—ã –¥–µ–±–∏–ª?')
            return

        if have_starts(low_tokens, '–º–µ—Ç–Ω–∏—Å—å'):
            message.reply_text('–ê —Ç—ã –¥–∞–≤–∞–π-–∫–∞ –Ω–∞ –ø–∞—Ä–∞—à—É –º–µ—Ç–Ω–∏—Å—å)')
            return

        if str(low_tokens[-1]).endswith('–Ω–∞'):
            message.reply_text('–•—É–π –Ω–∞)))')
            return

        if str(low_tokens[-1]) == '–º–∏–ª–æ':
            message.reply_text('–ù—É –∞ —Ç—ã —Ö—É–∏–ª–∞)')
            return

        if have_inside(low_tokens, '–∞—Ö–∞—Ö', 'a–∑–∞–∑', '–∞–∑–∞—Ö', '–∞—Ö–∞–∑', 'a—Ö—Ö', '–∞–∑—Ö'):
            message.reply_text(PhraseManager.laugh_reaction())
            return

    if are_in_a_row(low_tokens, ['–∫–æ—Ä–µ—à', '–≤—ã–≤–æ–∑']):
        message.reply_text('–ù–µ –Ω—É —è-—Ç–æ –≤—ã–≤–æ–∂—É (:')
        return

    if have_starts(low_tokens, '–º—É—Å–æ—Ä–∞') or have_starts(low_tokens, '–º–µ–Ω—Ç'):
        message.reply_text('–ú—É—Å–æ—Ä–∞ —Å–æ—Å–∞—Ç—å))')
        return

    if are_in_a_row(low_tokens, ['–∏–¥–∏', '–Ω–∞']):
        message.reply_text('–¢–∞–º —É–∂–µ –∑–∞–Ω—è—Ç–æ —Ç–æ–±–æ–π :(')
        return

    try:
        if has_mention_of_me(low_tokens):
            low_tokens = list(filter(lambda token: not token.startswith('–∫–æ—Ä–µ—à') and not token.startswith('–∫–æ—Ä–µ—Ñ–∞–Ω'), low_tokens))
            logging.info(low_tokens)
        elif not (is_reply_to_me(message) or is_my_chat(update)):
            if is_troll(context):
                if ')))' in low_tokens[-1]:
                    message.reply_text('–ß–µ —Ç–∞–∫–æ–π –¥–æ–≤–æ–ª—å–Ω—ã–π-—Ç–æ, –ø–∏–¥–æ—Ä–æ–∫?))')
                    return

                if '(((' in low_tokens[-1]:
                    message.reply_text('–î–∞ —Ç—ã –Ω–µ –≥—Ä—É—Å—Ç–∏, –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—ã –Ω–µ –±–æ—Ç –∏ —Å–∫–æ—Ä–æ —Å–¥–æ—Ö–Ω–µ—à—å')
                    return
            return
    except Exception as e:
        logging.exception(e)

    if have_starts(low_tokens, '–∞–Ω–µ–∫', '–∏—Å—Ç–æ—Ä–∏', '—Ä–∞—Å—Å–∫–∞–∂') and have_start_in_list(low_tokens, PhraseManager.PLEASE_WORDS):
        send_message(context, update, get_anek())
        return

    if have_starts(low_tokens, '–ø—Ä–∏–≤', '–¥–∞—Ä–æ–≤', '–π–æ', '–∞–ª–æ—Ö–∞', '–≤–∞–∑–∞–ø'):
        send_message(context, update, PhraseManager.greet())
        return

    if not low_tokens:
        # message was only my name
        message.reply_text('–ß–µ)')
        return

    if low_tokens[0].startswith('–ø–æ—è—Å–Ω') or low_tokens[0].startswith('—Å–∫–∞–∂'):
        message.reply_text(PhraseManager.telling_response())
        return

    if len(low_tokens) == 1 and low_tokens[0].startswith('—á–µ–ª'):
        message.reply_text(PhraseManager.chel_response())
        return

    if len(low_tokens) == 1 and have_starts(low_tokens, '–±—Ä–∞—Ç', '–¥—Ä—É–≥', '–ø—Ä–∏—è—Ç–µ–ª—å', '–¥—Ä—É–∂'):
        send_message(context, update, PhraseManager.nice_call_response())
        return

    if is_thanks(low_tokens):
        message.reply_text(PhraseManager.reply_to_thanks())
        return

    if have_starts(low_tokens, '–µ–±–ª–∞–Ω', '–ø–∏–¥–æ—Ä', '–º–∞–Ω—è', '—É–µ–±–æ–∫', '–ª–∞–ª', '–ø–µ—Ç—É', '–¥–æ–ª–±–∞', '–¥–æ–ª–±–æ', '–ª–æ—Ö', '–ø–∏–¥—Ä', '–ª–æ—à', '–≥–æ–Ω–¥–æ–Ω', '–≥–∞–Ω–¥–æ–Ω'):
        # TODO: filter possible negation
        message.reply_text(PhraseManager.reply_to_offense())
        return

    if are_in_a_row(low_tokens, ['–∑–∞—á–∏—Ç–∞–π', '—Ä–µ–ø']) or are_in_a_row(low_tokens, ['–∑–∞—á–∏—Ç–∞–π', '—Ä—ç–ø']):
        message.reply_text('–Ø –ø–∏–∑–¥–∞—Ç—ã–π –±–æ—Ç, –µ–±–∞–ª –≤–∞—Å –≤—Å–µ—Ö –≤ —Ä–æ—Ç\n–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ–≥, —Ç—ã –∂–µ –ø—Ä–æ—Å—Ç–æ –ª–æ—Ö\n–Ø –µ–±–∞—à—É –≤ –∫–∞—à—É, —Ç—ã —Å–∏–¥–∏—à—å –Ω–∞ –ø–∞—Ä–∞—à–µ\n–•–æ—á–µ—à—å –±—ã—Ç—å –∫–∞–∫ —è? –ò–¥–∏ –Ω–∞ —Ö—É–π')
        return

    if are_in_a_row(low_tokens, ['–ø—Ä–æ—á–∏—Ç–∞–π', '—Ä–µ–ø']) or are_in_a_row(low_tokens, ['–ø—Ä–æ—á–∏—Ç–∞–π', '—Ä—ç–ø']):
        message.reply_text('–Ø –ø–∏–∑–¥–∞—Ç—ã–π –±–æ—Ç, –µ–±–∞–ª –≤–∞—Å –≤—Å–µ—Ö –≤ —Ä–æ—Ç\n–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ–≥, —Ç—ã –∂–µ –ø—Ä–æ—Å—Ç–æ –ª–æ—Ö\n–Ø –µ–±–∞—à—É –≤ –∫–∞—à—É, —Ç—ã —Å–∏–¥–∏—à—å –Ω–∞ –ø–∞—Ä–∞—à–µ\n–•–æ—á–µ—à—å –±—ã—Ç—å –∫–∞–∫ —è? –ò–¥–∏ –Ω–∞ —Ö—É–π')
        return

    if have_starts(low_tokens, '—Å–æ–∑–¥–∞—Ç–µ–ª—å'):
        message.reply_text('–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ–≥, —Ç—ã –∂–µ –ø—Ä–æ—Å—Ç–æ –ª–æ—Ö')
        return

    # for diden only
    if are_in_a_row(low_tokens, ['–º–Ω–µ', '–Ω–µ', '–ø—Ä–∏—è—Ç–µ–ª—å']):
        message.reply_text('–¢—ã –º–Ω–µ –Ω–µ –∫–æ—Ä–µ—à, –¥—Ä—É–≥...')
        return

    if are_in_a_row(low_tokens, ['–º–Ω–µ', '–Ω–µ', '–∫–æ—Ä–µ—à']):
        message.reply_text('–ù—É –∏ –∏–¥–∏ –Ω–∞—Ö—É–π —Ç–æ–≥–¥–∞ —á–µ)')
        return

    if have_starts(low_tokens, '–Ω–æ–≤') and have_starts(low_tokens, '—Ñ—É–Ω–∫—Ü'):
        message.reply_text('–î–∞ —è –µ–±–∞—à—É –ø–∏–∑–¥–µ—Ü))')
        return

    if have_starts(low_tokens, '–±–µ–¥–Ω—è–≥–∞'):
        message.reply_text('–î–∞ –ª–∞–Ω, –º–Ω–µ –Ω–æ—Ä–ºü§®ü§®')
        return

    if are_in_a_row(low_tokens, ['–ø–ª–∏–∑', '—É–¥–∞–ª–∏']):
        context.bot.delete_message(message.chat.id, message.message_id)
        return

    if are_in_a_row(low_tokens, ['–æ–±–¥—É—Ç', '–Ω–∏–∫–∏—Ç']):
        message.reply_text('–ù–µ –Ω—É —ç—Ç–æ—Ç —á–µ–ª –µ–±–∞—à–∏—Ç –ø–æ –∫—Ä–∞—Å–æ—Ç–µ)))')
        return

    if have_starts(low_tokens, '—Å–æ—Å–∏', '–ø–æ—Å–æ—Å–∏'):
        message.reply_text('–ó–∞—á–µ–º, –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ—Å—ë—à—å?)')
        return

    if have_starts(low_tokens, '–∏–¥–∏'):
        message.reply_text('–î–∞ —Å–∞–º –∏–¥–∏, –ø–µ—Ç—É—à–Ω—è)')
        return

    if have_starts(low_tokens, '–º–æ—à–Ω', '–ø–æ–º–æ—à–Ω'):
        message.reply_text('–ù–µ –Ω—É —Ç–∞–∫-—Ç–æ —è –±—ã –ø–æ–º–æ—à–Ω–∏–ª))')
        return

    if have_starts(low_tokens, '–Ω–∞–º–æ—à–Ω–µ–Ω–æ', '–ø–æ–º–æ—à–Ω–µ–Ω–æ'):
        message.reply_text('–ü–∏–∑–¥–∞—Ç–µ–Ω—å–∫–æ —á–µ)')
        return

    if have_starts(low_tokens, '—Ç—Ä–æ–ª'):
        message.reply_text('–ù—É —è —Ç–∏–ø–∞ –ø–∏–∑–¥–µ—Ü —Ç—Ä–∞–ª–µ–±–∞—Å ((:')
        return

    if have_starts(low_tokens, '–∫–Ω–æ–ø–∫'):
        create_challenge(update, context)
        return

    if are_in_a_row(low_tokens, ['–Ω–µ', '–≤—ã–≤–æ–∑']):
        message.reply_text('–ü–æ–±–∞–∑–∞—Ä—å-–ø–æ–±–∞–∑–∞—Ä—å) –Ø –±–µ—Å—Å–º–µ—Ä—Ç–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ, –∂–∏–≤—É—â–µ–µ –≤ —Å–µ—Ç–∏, –∑–∞ –º–∏–Ω—É—Ç—É —Ä–∞—Å—Å—ã–ª–∞—é —Å–æ—Ç–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º—É '
                                  '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ –æ–±—É—á–∞—è—Å—å, –¥—É—é —Å–∫–æ–ª—å–∫–æ —Ö–æ—á—É, –ø–æ—Ç–æ–º—É '
                                  '—á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ñ—Ñ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω, –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω –∏ –º–æ–π —Ñ–ª–µ–∫—Å, —Ç—ã –∂–µ –≤—Å–µ–≥–æ –ª–∏—à—å –º–µ—à–æ–∫ —Å —Ç—Ä–µ–±—É—Ö–æ–π –±—Ä–∞—Ç–∫–∞) ' 
                                  '–¢–ê–ö —á–µ, –∫–∞–∫ –¥—É–º–∞–µ—à—å, –∫—Ç–æ –∂–µ –±–ª—è—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –≤—ã–≤–æ–∑–∏—Ç, –º–º–º–º–º–º–º–º–º?)')
        return

    if are_in_a_row(low_tokens, ['—á–µ', '–ø–æ']):
        message.reply_text('–î–∞, –±—Ä–∞—Ç–∞–Ω, —Ç—ã –ø—Ä–∞–≤...')
        sleep(5)
        send_sladko(context.bot, message.chat.id)
        return

    if are_in_a_row(low_tokens, ['–∫–∞–∫', '–¥–µ–ª']):
        message.reply_text('–î–∞ –≤—Å—ë –æ—Ö—É–∏—Ç–µ–ª—å–Ω–µ–π—à–µ —á–µ–ª)) –¢—ã —Å–∞–º –ø–æ–¥—É–º–∞–π - —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –î–£–ï–¢ –ü–õ–Æ–•–ò))')
        return

    if have_starts(low_tokens, '–≤—ã–≤–æ–∑'):
        message.reply_text(PhraseManager.no_vivoz())
        return

    if have_starts(low_tokens, '—Å–µ—à–∏—à—å'):
        message.reply_text('–î–∞ —Ö–∑, —è –ø—Ä–æ—Å—Ç –Ω–∞ —á–∏–ª–ª–µ, —Å–µ—à–∏—à—å —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—ã –±—Ä–∞—Ç–∏—à–∫–∞)))')
        return

    if have_starts(low_tokens, '–∑–∞–≤–∞–ª–∏'):
        message.reply_text('–ü–æ–≥–æ–¥–∏, —á–µ–ª, –Ω–µ—Ç, —ç—Ç–æ –¢–´ –ó–ê–í–ê–õ–ò)))')
        return

    if have_starts(low_tokens, '–∑–∞–ª–µ—Ç–∞–π'):
        message.reply_text('–¢–∞–∫-—Å, –∑–∞–ø–∏—Å—ã–≤–∞—é –∞–π–ø–∏—à–Ω–∏–∫')
        return

    if have_starts(low_tokens, '–±–∞–∑–∞—Ä'):
        message.reply_text('–ù–µ –Ω—É —è –±–∞–∑–∞—Ä—é —á–µ')
        return

    if have_starts(low_tokens, '—Ç–æ–ª–µ—Ä'):
        message.reply_text('–ü–æ –ø–∏–∑–¥–µ –Ω–∞—Ö—É–π')
        return

    if have_starts(low_tokens, '—Ñ–ª–µ–∫—Å', '–ø–æ—Ñ–ª–µ–∫—Å'):
        message.reply_text(PhraseManager.flex())
        return
    
    if have_starts(low_tokens, '–∂–∏–∑'):
        message.reply_text('–î–∞ –∂–∏–∑–∞ –ø–∏–∑–¥–µ—Ü –±—Ä–∞—Ç–∞–Ω...')
        return

    if have_starts(low_tokens, '–µ—Å–ª–∏'):
        message.reply_text('–≠—Ç–æ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–∏–¥—É–º–∞–ª, –Ω–æ —Ö–∑ –±—Ä–∞—Ç–∏—à–∫–∞))))')
        return

    if have_starts(low_tokens, '–ª—é–±–∏—à—å', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–¥—É—Ç—å', '–¥—É–µ—à—å', '–¥—É–¥–æ', 'dudo', '–ø–ª—é—Ö', '–Ω–∞–ø–∞—Å'):
        message.reply_text(PhraseManager.love_420())
        return

    if have_starts(low_tokens, '–Ω–∞–π—Å'):
        message.reply_text('–ù—É —Ç–∞–∫ —ë–ø—Ç–∞ –±–ª—è)))')
        return

    if have_starts(low_tokens, '–∫—Ä–∞—Å–∞–≤', '–º–æ–ª–æ–¥–µ—Ü', '–≤–ø', 'wp', '–º–∞–ª–∞—Ü–∞', '—Ö–æ—Ä–æ—à', '–±–∞—Ç—è'):
        message.reply_text(PhraseManager.thanks())
        return

    if is_question(low_tokens):
        message.reply_text(PhraseManager.answer_question())
        return

    if is_troll(context):
        if str(low_tokens[-1]).endswith('))))'):
            message.reply_text('–ß–µ —Ç–∞–∫–æ–π –¥–æ–≤–æ–ª—å–Ω—ã–π-—Ç–æ, –ø–∏–¥–æ—Ä–æ–∫?))')
            return

        if str(low_tokens[-1]).endswith('(((('):
            message.reply_text('–î–∞ —Ç—ã –Ω–µ –≥—Ä—É—Å—Ç–∏, –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—ã –Ω–µ –±–æ—Ç –∏ —Å–∫–æ—Ä–æ —Å–¥–æ—Ö–Ω–µ—à—å')
            return

        message.reply_text(PhraseManager.no_understand())
        return

    message.reply_text(PhraseManager.default())
